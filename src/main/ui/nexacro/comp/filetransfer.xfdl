<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="FileUpDown" left="0" top="0" width="440" height="850" border="" background="" onload="form_onload">
    <Layouts>
      <Layout height="850" width="440" stepcount="0" screenid="Mobile_screen">
        <Static id="Static02" taborder="0" text="FileDownload" cssclass="sta_WF_compTitle02" left="20" top="470" width="350" height="30" positionstep="0"/>
        <Static id="Static56" taborder="1" text="FileUpload" cssclass="sta_WF_compTitle02" left="20" top="89" width="310" height="30" positionstep="0"/>
        <Button id="btnDel" taborder="2" text="TEXT(&quot;comp.filetransfer.delete&quot;,&quot;삭제&quot;)" top="91" width="69" height="30" onclick="btnDel_onclick" positionstep="0" right="92" cssclass="btn_WF_basic01" messageid="comp.filetransfer.delete"/>
        <Grid id="grdFileUpload" taborder="3" left="20" top="127" height="320" binddataset="dsUpload" autofittype="col" nodatatext="Drag &amp; Drop files Here" positionstep="0" right="20" ondrop="grdFileUpload_ondrop" onheadclick="grdFileUpload_onheadclick" oncellclick="grdFileUpload_oncellclick">
          <Formats>
            <Format id="default">
              <Columns>
                <Column size="42" band="left"/>
                <Column size="258"/>
                <Column size="100"/>
              </Columns>
              <Rows>
                <Row size="42" band="head"/>
                <Row size="40"/>
              </Rows>
              <Band id="head">
                <Cell displaytype="checkboxcontrol" edittype="checkbox" text="0" checkboxtruevalue="1" checkboxfalsevalue="0"/>
                <Cell col="1" text="FILE_NAME"/>
                <Cell col="2" text="SIZE"/>
              </Band>
              <Band id="body">
                <Cell displaytype="checkboxcontrol" edittype="checkbox" text="bind:CHK"/>
                <Cell col="1" text="bind:FILE_NAME" displaytype="normal" edittype="none" treelevel="bind:DEPTH"/>
                <Cell col="2" treelevel="bind:DEPTH" text="bind:FiLE_SIZE"/>
              </Band>
            </Format>
          </Formats>
        </Grid>
        <Button id="btnSave" taborder="4" text="TEXT(&quot;comp.filetransfer.transfer&quot;,&quot;전송&quot;)" top="91" width="69" height="30" onclick="btnSave_onclick" positionstep="0" right="20" cssclass="btn_WF_basic02" messageid="comp.filetransfer.transfer"/>
        <Grid id="grdFileDownload" taborder="5" left="20" binddataset="dsDownload" autofittype="col" positionstep="0" right="20" oncelldblclick="grdFileDownload_oncelldblclick" onheadclick="grdFileDownload_onheadclick" top="510" height="320" oncellclick="grdFileDownload_oncellclick">
          <Formats>
            <Format id="default">
              <Columns>
                <Column size="35" band="left"/>
                <Column size="265"/>
                <Column size="100"/>
                <Column size="48"/>
              </Columns>
              <Rows>
                <Row size="40" band="head"/>
                <Row size="40"/>
              </Rows>
              <Band id="head">
                <Cell displaytype="checkboxcontrol" edittype="checkbox" text="0" checkboxfalsevalue="0" checkboxtruevalue="1"/>
                <Cell col="1" text="FILE_NAME"/>
                <Cell col="2" text="SIZE"/>
                <Cell col="3" text="DEL"/>
              </Band>
              <Band id="body">
                <Cell displaytype="checkboxcontrol" edittype="checkbox" text="bind:CHK"/>
                <Cell col="1" text="bind:FILE_NAME" displaytype="normal" edittype="none" treelevel="bind:DEPTH"/>
                <Cell col="2" treelevel="bind:DEPTH" text="bind:FiLE_SIZE"/>
                <Cell col="3" displaytype="imagecontrol" text="URL('imagerc::img_grd_reject.png')"/>
              </Band>
            </Format>
          </Formats>
        </Grid>
        <Button id="btnDonwload" taborder="6" text="TEXT(&quot;comp.filetransfer.downloadBtn&quot;,&quot;다운로드&quot;)" top="474" width="100" height="30" onclick="btnDonwload_onclick" positionstep="0" right="20" cssclass="btn_WF_basic01" messageid="comp.filetransfer.downloadBtn"/>
        <Button id="btnSearch" taborder="7" text="TEXT(&quot;grid.function.staSearch&quot;,&quot;조회&quot;)" top="474" width="100" height="30" onclick="btnSearch_onclick" positionstep="0" right="123" cssclass="btn_WF_basic02" messageid="grid.function.staSearch"/>
        <Button id="btnAdd" taborder="8" text="TEXT(&quot;sample.personalization.add&quot;,&quot;추가&quot;)" top="91" width="69" height="30" right="164" onclick="btnAdd_onclick" cssclass="btn_WF_basic01" messageid="sample.personalization.add"/>
        <Static id="Static00_00" taborder="9" text="TEXT(&quot;comp.filetransfer&quot;,&quot;File Transfer&quot;)" left="20" top="14" width="260" height="40" cssclass="sta_WF_pageTitle" messageid="comp.filetransfer" fittocontents="width"/>
      </Layout>
      <Layout name="Layout0" width="920" height="850" mobileorientation="landscape" screenid="Desktop_screen">
        <Grid id="grdFileUpload" left="20" top="117" height="320" right="20"/>
        <Static id="Static00_00" top="20" left="20" width="260" height="40"/>
        <Static id="Static56" left="20" top="81" width="310" height="30"/>
        <Static id="Static02" left="20" top="464" width="350" height="30"/>
        <Grid id="grdFileDownload" left="20" top="500" height="320" right="20"/>
        <Button id="btnDel" top="81" width="69" height="30" right="93"/>
        <Button id="btnSave" top="81" width="69" height="30" right="20" cssclass="btn_WF_basic02"/>
        <Button id="btnAdd" top="81" width="69" height="30" right="167"/>
        <Button id="btnDonwload" top="464" width="106" height="30" right="20"/>
        <Button id="btnSearch" top="464" width="106" height="30" right="132"/>
      </Layout>
    </Layouts>
    <Objects>
      <FileUpTransfer id="fileUpTrans" onerror="fileUpTrans_onerror" onsuccess="fileUpTrans_onsuccess"/>
      <FileDownTransfer id="fileDownTrans" onsuccess="fileDownTrans_onsuccess" onerror="fileDownTrans_onerror"/>
      <FileDialog id="fileDialog" onclose="fileDialog_onclose"/>
      <Dataset id="dsUpload">
        <ColumnInfo>
          <Column id="CHK" type="STRING" size="256"/>
          <Column id="FILE_NAME" type="STRING" size="256"/>
          <Column id="FILE_URL" type="STRING" size="256"/>
          <Column id="DEPTH" type="STRING" size="256"/>
          <Column id="STATUS" type="STRING" size="256"/>
          <Column id="FiLE_SIZE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsDownload">
        <ColumnInfo>
          <Column id="CHK" type="STRING" size="256"/>
          <Column id="FILE_NAME" type="STRING" size="256"/>
          <Column id="FILE_URL" type="STRING" size="256"/>
          <Column id="DEPTH" type="STRING" size="256"/>
          <Column id="STATUS" type="STRING" size="256"/>
          <Column id="FiLE_SIZE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsDownFileList">
        <ColumnInfo>
          <Column id="realFileName" type="STRING" size="256"/>
          <Column id="displayFileName" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsDeleteFile">
        <ColumnInfo>
          <Column id="FILE_NAME" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[/************************************************************************************************
 * FORM 변수 선언 영역
 ************************************************************************************************/
/* service url : 사용경로 지정 */
this.saveUrl = nexacro.getEnvironment().services["svc"].url;
this.nMaxFileSize = 2000000;	//각 파일 최대사이즈 (2 Mbyte)

/************************************************************************************************
 * FORM EVENT 영역(onload, onbeforeclose)
 ************************************************************************************************/
this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	this.gfnFormOnLoad();
};

/************************************************************************************************
 * CRUD 및 TRANSACTION, filetransfer 서비스 호출 처리
 ************************************************************************************************/ 
/**
* fnSearchFile : 파일 리스트 조회 서비스 호출
* @return : N/A
* @example :  
*/
this.fnSearchFile = function() 
{
	let strSvcId    = "list";
	let strSvcUrl   = "svc::getFileList?filepath=sample";
	let inData      = "";
	let outData     = "dsDownload=dsList";
	let strArg      = "";
	let callBackFnc = "fnCallbackTransaction";
	let isAsync   	= false;

	this.transaction(strSvcId , 		// transaction을 구분하기 위한 svc id값
						strSvcUrl , 	// trabsaction을 요청할 주소
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, a=b
						callBackFnc, 	// transaction의 결과를 받을 Function 이름
						isAsync,		// 비동기통신 여부 [생략가능]
						0); 			// XML
};

/**
* fn_FileDelete : 파일 삭제 서비스 호출
* @return : N/A
* @example :  
*/
this.fn_FileDelete = function(rowIdx, sFileName)
{
	this.dsDownload.deleteRow(rowIdx);
	
	this.dsDeleteFile.clearData();
	
	let idx = this.dsDeleteFile.addRow();
	this.dsDeleteFile.setColumn(idx,"FILE_NAME", sFileName);
	
	let strSvcId    = "delete";
	let strSvcUrl   = "svc::deleteFile";
	let inData      = "input=dsDeleteFile";
	let outData     = "";
	let strArg      = "filepath=sample";
	let callBackFnc = "fnCallbackTransaction";
	let isAsync   	= false;

	this.transaction(strSvcId , 		// transaction을 구분하기 위한 svc id값
						strSvcUrl , 	// trabsaction을 요청할 주소
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, a=b
						callBackFnc, 	// transaction의 결과를 받을 Function 이름
						isAsync,		// 비동기통신 여부 [생략가능]
						0); 			// XML
};

/************************************************************************************************
 * CALLBACK 콜백 처리부분(Transaction, Popup)
 ************************************************************************************************/
 /**
* fnCallbackTransaction : 트랜젝션 Callback 함수
* @param {String}  svcId	- 서비스 ID
* @param {String}  errCode	- 에러코드
* @param {String}  errMsg	- 에러메세지
* @return : N/A
* @example :  
*/
this.fnCallbackTransaction = function(svcId, errCode, errMsg)
{
	if(errCode < 0){
		alert(errCode+" >>> "+ errMsg);
		return;
	}
	
	switch(svcId) {
		case "list" :
			this.dsDownload.enableevent = false;

			this.dsDownload.addColumn("CHK", "STRING", 255);		
			for(var i=0; i<this.dsDownload.getRowCount(); i++) {	
				this.dsDownload.setColumn(i, "CHK", 0);
				this.dsDownload.setColumn(i,"FiLE_SIZE",this.fnGetFileSize(this.dsDownload.getColumn(i,"FiLE_SIZE")));
			}
			
			this.dsDownload.enableevent = true;			
			break;
			
		case "delete" :		
			break;
			
		default:
	}
};

/************************************************************************************************
 * 사용자 FUNCTION 영역
 ************************************************************************************************/
 /**
* fnUploadFile : 파일 업로드
* @return : N/A
* @example :  
*/
this.fnUploadFile = function()
{
	//파일업로드시 파일저장 폴더경로 PostData 셋팅
	this.fileUpTrans.setPostData("filepath","sample");
	
	//file upload
	let uploadUrl = this.saveUrl +"uploadFiles";
	this.fileUpTrans.upload(uploadUrl);
}

/**
* fnAddFileList : fileUpTrans객체에 파일을 추가한다.
* @param {Array}  filelists	- 파일 리스트
* @return : N/A
* @example :  
*/
this.fnAddFileList = function(filelists)
{	
	let len = filelists.length;
	for (let i = 0; i < len; i++) {
		let vFile = filelists[i];
		let isExist = this.fileUpTrans.existFile(vFile);
		
		//파일중복체크
		if(isExist){
			alert("이미추가된 파일이 있습니다.");
			return;
		}
		
		vFile.addEventHandler("onsuccess", this.fileList_onsuccess, this);
		vFile.addEventHandler("onerror", this.fileList_onerror, this);
		
		vFile.open(null, VirtualFile.openRead);
	}
}

/**
* fnGetFileSize : 파일 크기에 맞는 파일 사이즈를 표시한다.
* @param {String}  filesize	- 파일사이즈
* @return : N/A
* @example :  
* https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications#Example_Showing_file(s)_size
*/
this.fnGetFileSize = function(filesize)
{
	let sOutput = filesize + " bytes";
	let aMultiples = ["KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
	for (let nMultiple = 0, nApprox = filesize / 1024; nApprox > 1; nApprox /= 1024, nMultiple++) 
	{
		sOutput = nApprox.toFixed(3) + " " + aMultiples[nMultiple];
	}
	return sOutput;
};

/**
 * @class  유일한 ID 를 반환
 * @param {String} prefix id 앞에 붙일 문자열
 * @param {String} separator id 생성시 구분용 문자(default: '-' ).
 * @return {String} id
 * @example
 * trace(this.gfnGetUniqueI()); 
 * // output : 3e52d1f6-f0d2-4970-a590-ba7656b07859
 * 
 * trace(this.gfnGetUniqueI("Button_")); 
 * // output : Button_4e601da1-63f4-4cfa-849b-01b8a7f14d40
 * 
 * trace(this.gfnGetUniqueI("", "_")); 
 * // output : 4e601da1_63f4_4cfa_849b_01b8a7f14d40
 * 
 * trace(this.fnGetUniqueId("Button_", "_")); 
 * // output : Button_4e601da1_63f4_4cfa_849b_01b8a7f14d40
*/

/**
 * @class  alphabet character code.
 * charvalue값 => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f]
*/
this._ALPHA_CHAR_CODES = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102]
this.fnGetUniqueId = function(prefix, separator)
{
	if ( nexacro.isEmpty(prefix) ) prefix = "";
	if ( nexacro.isEmpty(separator) ) {
		separator = 45;
	} else {
		separator = separator.charCodeAt(0);
	}
	const pThis = this;
	let charcode = this._ALPHA_CHAR_CODES;
	let math = Math;
	let seq = 0;
	let seq0;
	let tmpArray = new Array(36);
	let idx = -1;
	
	while (seq < 8) 
	{
		tmpArray[++idx] = charcode[math.random() * 16 | 0];
		seq++;
	}
	seq = 0;
	while (seq < 3) 
	{
		tmpArray[++idx] = separator;//45 => "-", 95=> "_"
		seq0 = 0;
		while (seq0 < 4) 
		{
			tmpArray[++idx] = charcode[math.random() * 16  | 0];
			seq0++;
		}
		seq++;
	}
	tmpArray[++idx] = separator; //45 => "-", 95=> "_"
	
	let tmpStr = (new Date()).getTime();
	tmpStr = ("0000000" + tmpStr.toString(16)).substr(-8);
	seq = 0;
	while (seq < 8) 
	{
		tmpArray[++idx] = tmpStr.charCodeAt(seq);
		seq++;
	}
	seq = 0;
	while (seq < 4) 
	{
		tmpArray[++idx] = charcode[math.random() * 16 | 0];
		seq++;
	}
	return prefix + String.fromCharCode.apply(null, tmpArray);
};

/************************************************************************************************
* 각 COMPONENT 별 EVENT 영역
************************************************************************************************/
/**
 * @description 파일 추가 버튼 클릭
*/
this.btnAdd_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	//file dialog open
	this.fileDialog.open("Choose files", FileDialog.MULTILOAD);
};

/**
 * @description 파일 삭제 버튼 클릭
*/
this.btnDel_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	let grd 	= this.grdFileUpload;
	let ds 		= this.dsUpload;
	let fileTrs = this.fileUpTrans;
	
	let chkAll 	= grd.getCellPropertyValue(-1, 0, "text");
	let chk 	= ds.findRow('CHK', 1);
	
	if (chkAll == 1) {		
		// 전체 삭제
		ds.clearData();
		fileTrs.clearFileList();
		grd.setCellProperty('head', 0, 'text', 0);
		
	} else if (chk == -1) {		
		// 단건 삭제
		let nRow = ds.rowposition;
		ds.deleteRow(nRow);
		fileTrs.removeFileByIndex(nRow);
		
	} else {	
		// 체크박스 선택 삭제
		let length 	= ds.rowcount;
		for(let nRow=length-1; nRow>=0; nRow--) {
			if(ds.getColumn(nRow, 'CHK') == 1) {
				ds.deleteRow(nRow);
				fileTrs.removeFileByIndex(nRow);
			}
		}
	
	}
};

/**
 * @description 파일 전송 버튼 클릭
*/
this.btnSave_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	//file upload 실행
	this.setWaitCursor(true);
	this.fnUploadFile();
};

/**
 * @description 파일 조회 버튼 클릭
*/
this.btnSearch_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.fnSearchFile();
};

/**
 * @description 다운로드 버튼 클릭
*/
this.btnDonwload_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	//파일다운로드시 파일다운 폴더경로 PostData 셋팅
	this.fileDownTrans.setPostData("filepath","sample");
	
	let objDs = this.dsDownload;
	let nCnt = objDs.getRowCount();
	
	this.dsDownFileList.clearData();
	
	for(let i=0;i<nCnt;i++){
		let nChk = objDs.getColumn(i,"CHK");
		
		if(nChk==1) {
			let nRow = this.dsDownFileList.addRow();
			
			this.dsDownFileList.setColumn(nRow, "realFileName", objDs.getColumn(i,"FILE_NAME"));
			this.dsDownFileList.setColumn(nRow, "displayFileName", objDs.getColumn(i,"FILE_NAME"));			
		}
	}
	
	if(this.dsDownFileList.getRowCount() == 0) {
		alert("다운로드 할 파일을 선택하세요.");
		return;
	}

	this.fileDownTrans.setPostData("fileInfo",this.dsDownFileList.saveXML());

	//NRE 를 위한 다운로드 Default 파일명
	if(this.dsDownFileList.getRowCount() > 1) {
		//파일여러개 선택시 zip 파일로 압축하여 다운로드
		this.fileDownTrans.downloadfilename = "첨부파일.zip";
	}else{
		//파일이 1개일 경우 해당 파일명으로 다운로드
		this.fileDownTrans.downloadfilename = this.dsDownFileList.getColumn(0, "displayFileName");
	}

	//파일다운로드 실행
	let downloadUrl = this.saveUrl +"downloadFile";
	this.fileDownTrans.download(downloadUrl);
};


/**
 * @description 파일다이얼로그 닫았을 때 이벤트
*/
this.fileDialog_onclose = function(obj:nexacro.FileDialog,e:nexacro.FileDialogEventInfo)
{
	this.fnAddFileList(e.virtualfiles);
};

/**
 * @description 파일업로드 그리드 마우스 드랍 이벤트
*/
this.grdFileUpload_ondrop = function(obj:nexacro.Grid,e:nexacro.GridDragEventInfo)
{
	if(e.datatype == "file") {
		this.fnAddFileList(e.filelist);
	}
};

/**
 * @description 업로드 그리드 전체체크
*/
this.grdFileUpload_onheadclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	if(e.col == 0) {
	
		let chk = obj.getCellPropertyValue(e.row, e.cell, "text");
		
		if(chk == 1) {
			obj.setCellProperty("head", e.cell, "text", 1);	
			for(let i=0; i<this.dsUpload.rowcount; i++) {
				this.dsUpload.setColumn(i, "CHK", 1);
			}
			
		} else {
			obj.setCellProperty("head", e.cell, "text", 0);	
			for(let i=0; i<this.dsUpload.rowcount; i++) {
				this.dsUpload.setColumn(i, "CHK", 0);
			}
			
		}
	}	
};

/**
 * @description 파일업로드 체크박스 클릭 이벤트
*/
this.grdFileUpload_oncellclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	if(e.col == 0) {
	
		let ds = obj.getBindDataset();
		let strColID = ds.getColID(e.col);
		let chk = ds.findRow(strColID, 0);
		
		// 전체 체크 여부
		let unchkedIdx = this.dsUpload.findRow("CHK", 0);
		if(unchkedIdx == -1) {	// 모두 체크됨
			obj.setCellProperty("head", 0, "text", 1);			
		} else {	// 체크되지 않은 row 존재
			obj.setCellProperty("head", 0, "text", 0);		
		}
		
	}	
};

/**
 * @description 다운로드 그리드 전체체크
*/
this.grdFileDownload_onheadclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	if(e.col == 0) {
	
		let chk = obj.getCellPropertyValue(e.row, e.cell, "text");
		
		if(chk == 1) {
		
			obj.setCellProperty("head", e.cell, "text", 1);
			for(let i=0; i<this.dsDownload.rowcount; i++) {
				this.dsDownload.setColumn(i, "CHK", 1);
			}
			
		} else {
		
			obj.setCellProperty("head", e.cell, "text", 0);	
			for(let i=0; i<this.dsDownload.rowcount; i++) {
				this.dsDownload.setColumn(i, "CHK", 0);
			}
			
		}
	}	
};

/**
 * @description 파일다운로드 체크박스, 삭제 클릭 이벤트
*/
this.grdFileDownload_oncellclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{

	if (e.col == 0) {
	
		let ds = obj.getBindDataset();
		let strColID = ds.getColID(e.col);
		let chk = ds.findRow(strColID, 0);
		
	} else if (e.cell==3) {	//삭제버튼 클릭시 바로 삭제
	
		let sFileName = obj.getBindDataset().getColumn(e.row,"FILE_NAME");
		this.fn_FileDelete(e.row, sFileName);
		
	}
	
	// 전체 체크 여부
	let unchkedIdx = this.dsDownload.findRow("CHK", 0);
	if(unchkedIdx == -1) {	// 모두 체크됨
		obj.setCellProperty("head", 0, "text", 1);			
	} else {	// 체크되지 않은 row 존재
		obj.setCellProperty("head", 0, "text", 0);		
	}
		
};

/**
 * @description 다운로드 그리드 파일 다운로드
*/
this.grdFileDownload_oncelldblclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	if(e.col == 1 || e.col == 2) {
		//파일다운로드시 파일다운 폴더경로 PostData 셋팅
		this.fileDownTrans.setPostData("filepath","sample");
		
		let objDs = this.dsDownload;
		
		this.dsDownFileList.clearData();
		
		let nRow = this.dsDownFileList.addRow();
		
		this.dsDownFileList.setColumn(nRow, "realFileName", objDs.getColumn(e.row,"FILE_NAME"));
		this.dsDownFileList.setColumn(nRow, "displayFileName", objDs.getColumn(e.row,"FILE_NAME"));

		this.fileDownTrans.setPostData("fileInfo",this.dsDownFileList.saveXML());

		//파일이 1개일 경우 해당 파일명으로 다운로드
		this.fileDownTrans.downloadfilename = this.dsDownFileList.getColumn(0, "displayFileName");

		//파일다운로드 실행
		var downloadUrl = this.saveUrl +"downloadFile";
		this.fileDownTrans.download(downloadUrl);
	}
};


/**
 * @description 파일추가 성공
*/
this.fileList_onsuccess = function(obj:nexacro.VirtualFile, e:nexacro.VirtualFileEventInfo)
{
	if (e.reason == 1) {	//open() callback
		obj.getFileSize();
	} else if (e.reason == 9) {	//getFileSize() callback
		obj.close();
		
		let sFileName = obj.filename;
		let nFileSize = e.filesize;
		
		if (nFileSize > this.nMaxFileSize){
			alert("첨부파일 최대용량은 2 MByte 입니다.");
			return;
		}
		
		let strId = this.fnGetUniqueId();
		
		this.fileUpTrans.addFile(strId, obj);
		
		let nRowIdx = this.dsUpload.addRow();
		this.dsUpload.setColumn(nRowIdx, "FILE_NAME", sFileName);
		this.dsUpload.setColumn(nRowIdx, "FiLE_SIZE", this.fnGetFileSize(nFileSize));
	}
}
/**
 * @description 파일추가 실패
*/
this.fileList_onerror = function(obj:nexacro.VirtualFile, e:nexacro.VirtualFileErrorEventInfo)
{
	let msg = ">>>>>>>>> VirtualFile event ERROR >>>>>>>>\n";
	msg += "errortype : "+e.errortype+"\n";
	msg += "errormsg : "+e.errormsg+"\n";
	msg += "statuscode : "+e.statuscode;

	alert(msg);
}


/**
 * @description 업로드 성공
*/
this.fileUpTrans_onsuccess = function(obj:nexacro.FileUpTransfer,e:nexacro.FileUpTransferEventinfo)
{
	this.setWaitCursor(false);
	
	alert("전송완료");
};
/**
 * @description 업로드 실패
*/
this.fileUpTrans_onerror = function(obj:nexacro.FileUpTransfer,e:nexacro.FileUpTransferErrorEventInfo)
{
	this.setWaitCursor(false);
	alert(e.errortype + ">>" + e.errormsg);
};


/**
 * @description 다운로드 성공
*/
this.fileDownTrans_onsuccess = function(obj:nexacro.FileDownTransfer,e:nexacro.FileDownTransferEventInfo)
{
	trace(e.targetfullpath);
};
/**
 * @description 다운로드 실패
*/
this.fileDownTrans_onerror = function(obj:nexacro.FileDownTransfer,e:nexacro.FileDownTransferErrorEventInfo)
{
	trace("error : " + e.errormsg);
};








]]></Script>
  </Form>
</FDL>
